{"version":3,"sources":["file:///D:/Tower-Run/Tower-Run/assets/Scripts/CheckPoint.ts"],"names":["_decorator","Component","BoxCollider","find","director","GameManager","ccclass","property","CheckPoint","start","collider","getComponent","on","_onCollisionEnter","_playerNode","update","dt","_timer","_isInCheckPoint","_blocks","length","block","pop","emit","InGameState","LOAD_SCORE","getPosition","destroy","GameState","CHECK_POINT","event","otherCollider","name","STOP_MOVING","children","filter","node"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAsBC,MAAAA,W,OAAAA,W;AAA8BC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,Q,OAAAA,Q;;AACtEC,MAAAA,W,gBAAAA,W;;;;;;;AACDC,MAAAA,O,GAAsBN,U,CAAtBM,O;AAASC,MAAAA,Q,GAAaP,U,CAAbO,Q;;4BAGJC,U,WADZF,OAAO,CAAC,YAAD,C;;;;;;;;;;;;wEAGwB,I;;4EACO,K;;oEACT,I;;mEACD,C;;;;;;;eAEzBG,K,GAAA,iBAAS;AACL,cAAIC,QAAQ,GAAG,KAAKC,YAAL,CAAkBT,WAAlB,CAAf;AACAQ,UAAAA,QAAQ,CAACE,EAAT,CAAY,kBAAZ,EAAgC,KAAKC,iBAArC,EAAwD,IAAxD;AAEA,eAAKC,WAAL,GAAmBX,IAAI,CAAC,mBAAD,CAAvB;AACH,S;;eAGDY,M,GAAA,gBAAOC,EAAP,EAAmB;AACf,eAAKC,MAAL,IAAeD,EAAf;;AACA,cAAI,KAAKC,MAAL,GAAc,CAAd,IAAmB,KAAKC,eAAxB,IAA2C,KAAKC,OAAL,CAAaC,MAAb,IAAuB,CAAtE,EAAyE;AAAE;AACvE,gBAAIC,KAAW,GAAG,KAAKF,OAAL,CAAaG,GAAb,EAAlB;;AACAlB,YAAAA,QAAQ,CAACmB,IAAT,CAAc;AAAA;AAAA,4CAAYC,WAAZ,CAAwBC,UAAtC,EAAkD,IAAlD,EAAwDJ,KAAK,CAACK,WAAN,EAAxD;AACAL,YAAAA,KAAK,CAACM,OAAN;AACA,iBAAKV,MAAL,GAAc,CAAd;;AAEA,gBAAI,KAAKE,OAAL,CAAaC,MAAb,IAAuB,CAA3B,EAA8B;AAC1BhB,cAAAA,QAAQ,CAACmB,IAAT,CAAc;AAAA;AAAA,8CAAYK,SAAZ,CAAsBC,WAApC,EAAiD,IAAjD;AACH;AACJ;AACJ,S;;eAGOhB,iB,GAAR,2BAA0BiB,KAA1B,EAAkD;AAC9C,cAAIA,KAAK,CAACC,aAAN,CAAoBC,IAApB,KAA6B,oBAA7B,IAAqD,CAAC,KAAKd,eAA/D,EAAgF;AAE5E,iBAAKA,eAAL,GAAuB,IAAvB;AACAd,YAAAA,QAAQ,CAACmB,IAAT,CAAc;AAAA;AAAA,4CAAYC,WAAZ,CAAwBS,WAAtC,EAH4E,CAK5E;;AACA,iBAAKd,OAAL,GAAe,KAAKL,WAAL,CAAiBoB,QAAjB,CAA0BC,MAA1B,CAAiC,UAACC,IAAD,EAAU;AACtD,qBAAOA,IAAI,CAACJ,IAAL,KAAc,OAArB;AACH,aAFc,CAAf;AAGH;AAEJ,S;;;QA1C2B/B,S","sourcesContent":["\r\nimport { _decorator, Component, Node, log, BoxCollider, ICollisionEvent, find, director } from 'cc';\r\nimport { GameManager } from './GameManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('CheckPoint')\r\nexport class CheckPoint extends Component {\r\n\r\n    private _playerNode: Node = null!\r\n    private _isInCheckPoint: boolean = false // clearLevel set it to false again\r\n    private _blocks: Node[] = null!\r\n    private _timer: number = 0\r\n\r\n    start () {\r\n        let collider = this.getComponent(BoxCollider)!\r\n        collider.on('onCollisionEnter', this._onCollisionEnter, this)\r\n\r\n        this._playerNode = find('Models/PlayerNode')!\r\n    }\r\n\r\n\r\n    update(dt: number) {\r\n        this._timer += dt\r\n        if (this._timer > 1 && this._isInCheckPoint && this._blocks.length != 0) { // 逐个对方块进行结算\r\n            let block: Node = this._blocks.pop()!\r\n            director.emit(GameManager.InGameState.LOAD_SCORE, 3000, block.getPosition())\r\n            block.destroy()\r\n            this._timer = 0\r\n            \r\n            if (this._blocks.length == 0) {\r\n                director.emit(GameManager.GameState.CHECK_POINT, true)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private _onCollisionEnter(event: ICollisionEvent) {\r\n        if (event.otherCollider.name === 'block<BoxCollider>' && !this._isInCheckPoint) {\r\n\r\n            this._isInCheckPoint = true\r\n            director.emit(GameManager.InGameState.STOP_MOVING)\r\n\r\n            // 子节点只要 block 节点，其他过滤掉\r\n            this._blocks = this._playerNode.children.filter((node) => {\r\n                return node.name === \"block\"\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    \r\n}\r\n"]}