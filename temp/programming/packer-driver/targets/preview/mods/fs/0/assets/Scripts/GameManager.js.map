{"version":3,"sources":["file:///D:/Tower-Run/Tower-Run/assets/Scripts/GameManager.ts"],"names":["_decorator","Component","Node","log","instantiate","Prefab","resources","Vec3","director","sys","SkinnedMeshRenderer","MeshRenderer","ccclass","property","GameState","InGameState","GameManager","start","_getSkinID","_initLevel","on","INIT","_clearLevel","scheduleOnce","_generateSpawnList","_spawnResourceByList","_spawnList","bridgesNode","destroyAllChildren","cratesNode","blocksNode","coinsNode","playerNode","modelsNode","getChildByName","checkPointNode","destroy","min_bridge","min_crates","Math","floor","min_blocks","min_coins","cur_crates","cur_blocks","cur_coins","randomNum","i","length","random","_getRandomXPos","list","curZPos","_loadResource","crate","pos","randomCrate","ceil","block","bridgePos","xPos","blockPos","coin","coinPos","emit","START_MOVING","randomXPos","_playerSkinID","localStorage","getItem","_blockSkinID","_setSkin","node","name","playerMesh","getComponent","setMaterial","getMaterial","blockMesh","prefabName","parentNode","load","err","prefab","setParent","setPosition","player","getChildByPath","active"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,G,OAAAA,G;AAAWC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,Q,OAAAA,Q;AAAgBC,MAAAA,G,OAAAA,G;AAAKC,MAAAA,mB,OAAAA,mB;AAAqBC,MAAAA,Y,OAAAA,Y;;;;;;;AACzHC,MAAAA,O,GAAsBZ,U,CAAtBY,O;AAASC,MAAAA,Q,GAAab,U,CAAba,Q;;iBAEZC,S;AAAAA,QAAAA,S;AAAAA,QAAAA,S;AAAAA,QAAAA,S;AAAAA,QAAAA,S;SAAAA,S,KAAAA,S;;iBAOAC,W;AAAAA,QAAAA,W;AAAAA,QAAAA,W;AAAAA,QAAAA,W;AAAAA,QAAAA,W;SAAAA,W,KAAAA,W;;6BAQQC,W,WADZJ,OAAO,CAAC,aAAD,C,UAGHC,QAAQ,CAACX,IAAD,C,UAERW,QAAQ,CAACX,IAAD,C,UAERW,QAAQ,CAACX,IAAD,C,UAERW,QAAQ,CAACX,IAAD,C,UAERW,QAAQ,CAACX,IAAD,C;;;;;;;;;;;;;;;;;;;;;;0EAG8B,I;;yEACD,I;;uEACV,E;;;;;;;eAK5Be,K,GAAA,iBAAS;AACL,eAAKC,UAAL;;AACA,eAAKC,UAAL;;AACAX,UAAAA,QAAQ,CAACY,EAAT,CAAYN,SAAS,CAACO,IAAtB,EAA4B,KAAKF,UAAjC,EAA6C,IAA7C;AACH,S;;eAGOA,U,GAAR,sBAAqB;AAAA;;AACjB,eAAKG,WAAL;;AAEA,eAAKC,YAAL,CAAkB,YAAM;AACpB,YAAA,MAAI,CAACC,kBAAL;;AACA,YAAA,MAAI,CAACC,oBAAL,CAA0B,MAAI,CAACC,UAA/B;AACH,WAHD,EAGG,CAHH;AAIH,S;;eAGOJ,W,GAAR,uBAAsB;AAClB,eAAKK,WAAL,CAAiBC,kBAAjB;AACA,eAAKC,UAAL,CAAgBD,kBAAhB;AACA,eAAKE,UAAL,CAAgBF,kBAAhB;AACA,eAAKG,SAAL,CAAeH,kBAAf;AAEA,cAAII,UAAuB,GAAG,KAAKC,UAAL,CAAgBC,cAAhB,CAA+B,YAA/B,CAA9B;AACA,cAAIC,cAA2B,GAAG,KAAKF,UAAL,CAAgBC,cAAhB,CAA+B,YAA/B,CAAlC;AACA,cAAIF,UAAJ,EAAgBA,UAAU,CAACI,OAAX;AAChB,cAAID,cAAJ,EAAoBA,cAAc,CAACC,OAAf;AACvB,S;;eAIOZ,kB,GAAR,8BAA6B;AAEzB,cAAIa,UAAkB,GAAG,EAAzB,CAFyB,CAEG;;AAC5B,cAAIC,UAAkB,GAAGC,IAAI,CAACC,KAAL,CAAWH,UAAU,GAAG,CAAxB,CAAzB,CAHyB,CAG2B;;AACpD,cAAII,UAAkB,GAAGF,IAAI,CAACC,KAAL,CAAWH,UAAU,GAAG,CAAxB,CAAzB,CAJyB,CAI2B;;AACpD,cAAIK,SAAiB,GAAGH,IAAI,CAACC,KAAL,CAAWH,UAAU,GAAG,EAAxB,CAAxB,CALyB,CAK2B;;AAEpD,cAAIM,UAAkB,GAAG,CAAzB,CAPyB,CAOE;;AAC3B,cAAIC,UAAkB,GAAG,CAAzB;AACA,cAAIC,SAAiB,GAAG,CAAxB,CATyB,CAWxB;;AACD,cAAIC,SAAiB,GAAG,CAAxB;;AAEA,eAAK,IAAIC,CAAC,GAAC,CAAX,EAAc,KAAKrB,UAAL,CAAgBsB,MAAhB,KAA2BX,UAAzC,EAAqDU,CAAC,EAAtD,EAA0D;AAEtDD,YAAAA,SAAS,GAAGP,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACU,MAAL,KAAgB,CAA3B,CAAZ;;AACA,oBAAOH,SAAP;AACI,mBAAK,CAAL;AACI,qBAAKpB,UAAL,CAAgBqB,CAAhB,IAAqB;AAAC,4BAAU;AAAX,iBAArB;AACA;;AAEJ,mBAAK,CAAL;AACI,oBAAIJ,UAAU,GAAGL,UAAb,IAA2BS,CAAC,GAAG,EAAnC,EAAuC;AAAE;AACrC,uBAAKrB,UAAL,CAAgBqB,CAAhB,IAAqB;AAAC,8BAAU,IAAX;AAAiB,6BAAS;AAA1B,mBAArB;AACAJ,kBAAAA,UAAU;AACV;AACH,iBAJD,MAIO;AACH,uBAAKjB,UAAL,CAAgBqB,CAAhB,IAAqB;AAAC,8BAAU;AAAX,mBAArB;AACA;AACH;;AAEL,mBAAK,CAAL;AACI,oBAAIH,UAAU,GAAGH,UAAb,IAA2BM,CAAC,GAAG,CAAnC,EAAsC;AAAE;AACpC,uBAAKrB,UAAL,CAAgBqB,CAAhB,IAAqB;AAAC,8BAAU,IAAX;AAAiB,6BAAS;AAAC,8BAAQ,KAAKG,cAAL;AAAT;AAA1B,mBAArB;AACAN,kBAAAA,UAAU;AACV;AACH,iBAJD,MAIO;AACH,uBAAKlB,UAAL,CAAgBqB,CAAhB,IAAqB;AAAC,8BAAU;AAAX,mBAArB;AACA;AACH;;AAEL,mBAAK,CAAL;AACI,oBAAIF,SAAS,GAAGH,SAAZ,IAAyBK,CAAC,GAAG,EAAjC,EAAqC;AAAE;AACnC,uBAAKrB,UAAL,CAAgBqB,CAAhB,IAAqB;AAAC,8BAAU,IAAX;AAAiB,4BAAQ;AAAC,8BAAQ,KAAKG,cAAL;AAAT;AAAzB,mBAArB;AACAL,kBAAAA,SAAS;AACT;AACH,iBAJD,MAIO;AACH,uBAAKnB,UAAL,CAAgBqB,CAAhB,IAAqB;AAAC,8BAAU;AAAX,mBAArB;AACA;AACH;;AAjCT;AAoCH;;AAED5C,UAAAA,GAAG,CAAC,WAAD,EAAc,KAAKuB,UAAnB,CAAH;AAEH,S;;eAGOD,oB,GAAR,8BAA6B0B,IAA7B,EAA0C;AACtC,cAAI,CAACA,IAAL,EAAW;AAAE;AACTA,YAAAA,IAAI,GAAG,KAAKzB,UAAZ;AACH;;AAED,cAAI0B,OAAe,GAAG,CAAtB,CALsC,CAOtC;;AACA,eAAKC,aAAL,CAAmB,YAAnB,EAAiC,KAAKpB,UAAtC,EAAkD,IAAI1B,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,CAAlD;;AAEA,eAAK,IAAIwC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACI,IAAI,CAACH,MAArB,EAA6BD,CAAC,EAA9B,EAAkC;AAC9B;AACA,gBAAII,IAAI,CAACJ,CAAD,CAAJ,CAAQO,KAAZ,EAAmB;AACf,kBAAIC,GAAS,GAAG,IAAIhD,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe6C,OAAf,CAAhB;;AACA,mBAAKC,aAAL,CAAmB,cAAnB,EAAmC,KAAK1B,WAAxC,EAAqD4B,GAArD;;AAEA,kBAAIC,WAAmB,GAAGjB,IAAI,CAACkB,IAAL,CAAUlB,IAAI,CAACU,MAAL,KAAgB,CAA1B,CAA1B;;AACA,mBAAKI,aAAL,aAA6BG,WAA7B,EAA4C,KAAK3B,UAAjD,EAA6D0B,GAA7D;;AAEAH,cAAAA,OAAO,GAPQ,CASnB;AACC,aAVD,MAUO,IAAID,IAAI,CAACJ,CAAD,CAAJ,CAAQW,KAAZ,EAAmB;AACtB,kBAAIC,SAAe,GAAG,IAAIpD,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe6C,OAAf,CAAtB;;AACA,mBAAKC,aAAL,CAAmB,cAAnB,EAAmC,KAAK1B,WAAxC,EAAqDgC,SAArD;;AAGA,kBAAIC,IAAY,GAAGT,IAAI,CAACJ,CAAD,CAAJ,CAAQW,KAAR,CAAcE,IAAjC;AACA,kBAAIC,QAAc,GAAG,IAAItD,IAAJ,CAASqD,IAAT,EAAe,GAAf,EAAoBR,OAApB,CAArB;;AACA,mBAAKC,aAAL,CAAmB,OAAnB,EAA4B,KAAKvB,UAAjC,EAA6C+B,QAA7C;;AAEAT,cAAAA,OAAO,GATe,CAW1B;AACC,aAZM,MAYA,IAAID,IAAI,CAACJ,CAAD,CAAJ,CAAQe,IAAZ,EAAkB;AACrB,kBAAIH,UAAe,GAAG,IAAIpD,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe6C,OAAf,CAAtB;;AACA,mBAAKC,aAAL,CAAmB,cAAnB,EAAmC,KAAK1B,WAAxC,EAAqDgC,UAArD;;AAGA,kBAAIC,KAAY,GAAGT,IAAI,CAACJ,CAAD,CAAJ,CAAQe,IAAR,CAAaF,IAAhC;AACA,kBAAIG,OAAa,GAAG,IAAIxD,IAAJ,CAASqD,KAAT,EAAe,GAAf,EAAoBR,OAApB,CAApB;;AACA,mBAAKC,aAAL,CAAmB,MAAnB,EAA2B,KAAKtB,SAAhC,EAA2CgC,OAA3C;;AAEAX,cAAAA,OAAO,GATc,CAWzB;AACC,aAZM,MAYA;AACH,kBAAIO,WAAe,GAAG,IAAIpD,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe6C,OAAf,CAAtB;;AACA,mBAAKC,aAAL,CAAmB,cAAnB,EAAmC,KAAK1B,WAAxC,EAAqDgC,WAArD;;AAEAP,cAAAA,OAAO;AACV;AACJ,WApDqC,CAuDtC;;;AACA,eAAKC,aAAL,CAAmB,YAAnB,EAAiC,KAAKpB,UAAtC,EAAkD,IAAI1B,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe6C,OAAf,CAAlD;;AAGA,eAAK7B,YAAL,CAAkB,YAAM;AACpBf,YAAAA,QAAQ,CAACwD,IAAT,CAAcjD,WAAW,CAACkD,YAA1B;AACH,WAFD,EAEG,GAFH;AAGH,S,CAGD;;;eACQf,c,GAAR,0BAAiC;AAC7B,cAAIgB,UAAkB,GAAG3B,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACU,MAAL,KAAgB,CAA3B,CAAzB;AACA,cAAIiB,UAAU,KAAK,CAAnB,EAAsB,OAAO,CAAC,CAAR;AACtB,iBAAOA,UAAP;AACH,S;;eAGOhD,U,GAAR,sBAAqB;AACjB,eAAKiD,aAAL,GAAqB1D,GAAG,CAAC2D,YAAJ,CAAiBC,OAAjB,CAAyB,QAAzB,CAArB;AACA,eAAKC,YAAL,GAAoB7D,GAAG,CAAC2D,YAAJ,CAAiBC,OAAjB,CAAyB,OAAzB,CAApB;AACH,S;;eAGOE,Q,GAAR,kBAAiBC,IAAjB,EAA6B;AACzB,cAAIA,IAAI,CAACC,IAAL,KAAc,QAAd,IAA0B,KAAKN,aAAnC,EAAkD;AAC9C,gBAAMO,UAA+B,GAAGF,IAAI,CAACG,YAAL,CAAkBjE,mBAAlB,CAAxC;AACAgE,YAAAA,UAAU,CAACE,WAAX,CAAuBF,UAAU,CAACG,WAAX,CAAuB,KAAKV,aAA5B,CAAvB,EAAmE,CAAnE;AACAO,YAAAA,UAAU,CAACE,WAAX,CAAuBF,UAAU,CAACG,WAAX,CAAuB,KAAKV,aAA5B,CAAvB,EAAmE,CAAnE;AAEH,WALD,MAKO,IAAIK,IAAI,CAACC,IAAL,KAAc,OAAd,IAAyB,KAAKH,YAAlC,EAAgD;AACnD,gBAAMQ,SAAuB,GAAGN,IAAI,CAACG,YAAL,CAAkBhE,YAAlB,CAAhC;AACAmE,YAAAA,SAAS,CAACF,WAAV,CAAsBE,SAAS,CAACD,WAAV,CAAsB,KAAKP,YAA3B,CAAtB,EAAgE,CAAhE;AACAQ,YAAAA,SAAS,CAACF,WAAV,CAAsBE,SAAS,CAACD,WAAV,CAAsB,KAAKP,YAA3B,CAAtB,EAAgE,CAAhE;AACH;AACJ,S;;eAGOjB,a,GAAR,uBAAsB0B,UAAtB,EAA0CC,UAA1C,EAA4DzB,GAA5D,EAAuE;AAAA;;AACnE,cAAIiB,IAAU,GAAG,IAAjB;AAEAlE,UAAAA,SAAS,CAAC2E,IAAV,CAAeF,UAAf,EAA2B1E,MAA3B,EAAmC,UAAC6E,GAAD,EAAWC,MAAX,EAA8B;AAC7D,gBAAID,GAAJ,EAAS;AACL/E,cAAAA,GAAG,CAAC,aAAD,EAAgB+E,GAAhB,CAAH;AACA;AACH;;AAEDV,YAAAA,IAAI,GAAGpE,WAAW,CAAC+E,MAAD,CAAlB;AACAX,YAAAA,IAAI,CAACY,SAAL,CAAeJ,UAAf;AACAR,YAAAA,IAAI,CAACa,WAAL,CAAiB9B,GAAjB;;AAGA,gBAAIwB,UAAU,KAAK,YAAnB,EAAiC;AAC7B,kBAAI,MAAI,CAACZ,aAAT,EAAwB;AACpB,oBAAImB,MAAY,GAAGd,IAAI,CAACe,cAAL,CAAoB,eAApB,CAAnB;;AACA,gBAAA,MAAI,CAAChB,QAAL,CAAce,MAAd;AACH;;AAED,kBAAI,MAAI,CAAChB,YAAT,EAAuB;AACnB,oBAAIZ,KAAW,GAAGc,IAAI,CAACe,cAAL,CAAoB,aAApB,CAAlB;;AACA,gBAAA,MAAI,CAAChB,QAAL,CAAcb,KAAd;AACH;;AAEDc,cAAAA,IAAI,CAACgB,MAAL,GAAc,IAAd;AAEH,aAbD,MAaO,IAAIT,UAAU,KAAK,OAAf,IAA0B,MAAI,CAACT,YAAnC,EAAiD;AACpD,kBAAIZ,MAAW,GAAGc,IAAI,CAACe,cAAL,CAAoB,OAApB,CAAlB;;AACA,cAAA,MAAI,CAAChB,QAAL,CAAcb,MAAd;;AACAc,cAAAA,IAAI,CAACgB,MAAL,GAAc,IAAd;AACH;AACJ,WA7BD;AA+BH,S;;;QA9O4BvF,S,2CAiBDc,W,yCACFD,S;;;;;iBAfP,I;;;;;;;iBAEC,I;;;;;;;iBAED,I;;;;;;;iBAEA,I;;;;;;;iBAED,I","sourcesContent":["\r\nimport { _decorator, Component, Node, log, find, instantiate, Prefab, resources, Vec3, director, game, sys, SkinnedMeshRenderer, MeshRenderer } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\nenum GameState {\r\n    INIT = 'init', // 初始化完成\r\n    READY = 'ready',\r\n    GAME_OVER = 'game-over', // 未到达终点，游戏失败\r\n    CHECK_POINT = 'check-point', // 成功到达终点，游戏胜利\r\n}\r\n\r\nenum InGameState {\r\n    STOP_MOVING = 'stop-moving',\r\n    START_MOVING = 'start-moving',\r\n    LOAD_SCORE = 'load-score',\r\n    SCORE_ADDED = 'score-added',\r\n}\r\n\r\n@ccclass('GameManager')\r\nexport class GameManager extends Component {\r\n\r\n    @property(Node)\r\n    modelsNode: Node = null!\r\n    @property(Node)\r\n    bridgesNode: Node = null!\r\n    @property(Node)\r\n    cratesNode: Node = null!\r\n    @property(Node)\r\n    blocksNode: Node = null!\r\n    @property(Node)\r\n    coinsNode: Node = null!\r\n\r\n    private _playerSkinID: number | null = null\r\n    private _blockSkinID: number | null = null\r\n    private _spawnList: any[] = []\r\n\r\n    public static InGameState = InGameState\r\n    public static GameState = GameState\r\n\r\n    start () {\r\n        this._getSkinID()\r\n        this._initLevel()\r\n        director.on(GameState.INIT, this._initLevel, this)\r\n    }\r\n\r\n\r\n    private _initLevel() {\r\n        this._clearLevel()\r\n\r\n        this.scheduleOnce(() => {\r\n            this._generateSpawnList()\r\n            this._spawnResourceByList(this._spawnList)\r\n        }, 1)\r\n    }\r\n\r\n\r\n    private _clearLevel() {\r\n        this.bridgesNode.destroyAllChildren()\r\n        this.cratesNode.destroyAllChildren()\r\n        this.blocksNode.destroyAllChildren()\r\n        this.coinsNode.destroyAllChildren()\r\n\r\n        let playerNode: Node | null = this.modelsNode.getChildByName(\"PlayerNode\")\r\n        let checkPointNode: Node | null = this.modelsNode.getChildByName(\"CheckPoint\")\r\n        if (playerNode) playerNode.destroy()\r\n        if (checkPointNode) checkPointNode.destroy()\r\n    }\r\n\r\n\r\n\r\n    private _generateSpawnList() {\r\n\r\n        let min_bridge: number = 60 // 桥数量\r\n        let min_crates: number = Math.floor(min_bridge / 8) // 木箱（障碍物）数量\r\n        let min_blocks: number = Math.floor(min_bridge / 5) // 方块数量\r\n        let min_coins: number = Math.floor(min_bridge / 10) // 硬币数量\r\n\r\n        let cur_crates: number = 0 // 当前木箱数量\r\n        let cur_blocks: number = 0\r\n        let cur_coins: number = 0\r\n\r\n         // 0：只生成桥, 1：生成桥和木箱, 2：生成桥和方块, 3：生成桥和硬币\r\n        let randomNum: number = 0\r\n\r\n        for (let i=0; this._spawnList.length !== min_bridge; i++) {\r\n            \r\n            randomNum = Math.floor(Math.random() * 4)\r\n            switch(randomNum) {\r\n                case 0:\r\n                    this._spawnList[i] = {\"bridge\": true}\r\n                    break\r\n\r\n                case 1:\r\n                    if (cur_crates < min_crates && i > 15) { // 15 块桥后再生成木箱\r\n                        this._spawnList[i] = {\"bridge\": true, \"crate\": true}\r\n                        cur_crates ++\r\n                        break\r\n                    } else {\r\n                        this._spawnList[i] = {\"bridge\": true}\r\n                        break\r\n                    }\r\n\r\n                case 2:\r\n                    if (cur_blocks < min_blocks && i > 3) { // 3 块桥后再生成方块\r\n                        this._spawnList[i] = {\"bridge\": true, \"block\": {\"xPos\": this._getRandomXPos()}}\r\n                        cur_blocks ++\r\n                        break\r\n                    } else {\r\n                        this._spawnList[i] = {\"bridge\": true}\r\n                        break\r\n                    }\r\n\r\n                case 3:\r\n                    if (cur_coins < min_coins && i > 20) { // 20 块桥后再生成硬币\r\n                        this._spawnList[i] = {\"bridge\": true, \"coin\": {\"xPos\": this._getRandomXPos()}}\r\n                        cur_coins ++\r\n                        break\r\n                    } else {\r\n                        this._spawnList[i] = {\"bridge\": true}\r\n                        break\r\n                    }\r\n\r\n            }\r\n        }\r\n\r\n        log(\"spawnList\", this._spawnList)\r\n\r\n    }\r\n\r\n\r\n    private _spawnResourceByList(list: any[]) {\r\n        if (!list) { // 如果没传参\r\n            list = this._spawnList\r\n        }\r\n\r\n        let curZPos: number = 0\r\n\r\n        // 先加载玩家节点 prefab\r\n        this._loadResource(\"PlayerNode\", this.modelsNode, new Vec3(0, 0, 0))\r\n\r\n        for (let i=0; i<list.length; i++) {\r\n            // 加载桥和木箱 prefab\r\n            if (list[i].crate) {\r\n                let pos: Vec3 = new Vec3(0, 0, curZPos)\r\n                this._loadResource(\"bridge_1_row\", this.bridgesNode, pos)\r\n\r\n                let randomCrate: number = Math.ceil(Math.random() * 6)\r\n                this._loadResource(`crates_${randomCrate}`, this.cratesNode, pos)\r\n\r\n                curZPos ++\r\n\r\n            // 加载桥和方块 prefab\r\n            } else if (list[i].block) {\r\n                let bridgePos: Vec3 = new Vec3(0, 0, curZPos)\r\n                this._loadResource(\"bridge_1_row\", this.bridgesNode, bridgePos)\r\n\r\n\r\n                let xPos: number = list[i].block.xPos\r\n                let blockPos: Vec3 = new Vec3(xPos, 0.6, curZPos)\r\n                this._loadResource(\"block\", this.blocksNode, blockPos)\r\n                \r\n                curZPos ++\r\n\r\n            // 加载桥和硬币 prefab\r\n            } else if (list[i].coin) {\r\n                let bridgePos: Vec3 = new Vec3(0, 0, curZPos)\r\n                this._loadResource(\"bridge_1_row\", this.bridgesNode, bridgePos)\r\n\r\n\r\n                let xPos: number = list[i].coin.xPos\r\n                let coinPos: Vec3 = new Vec3(xPos, 0.7, curZPos)\r\n                this._loadResource(\"coin\", this.coinsNode, coinPos)\r\n                \r\n                curZPos ++\r\n\r\n            // 仅加载桥 prefab\r\n            } else {\r\n                let bridgePos: Vec3 = new Vec3(0, 0, curZPos)\r\n                this._loadResource(\"bridge_1_row\", this.bridgesNode, bridgePos)\r\n\r\n                curZPos ++\r\n            }\r\n        }\r\n\r\n        \r\n        // 加载终点 prefab\r\n        this._loadResource(\"CheckPoint\", this.modelsNode, new Vec3(0, 0, curZPos))\r\n\r\n        \r\n        this.scheduleOnce(() => {\r\n            director.emit(InGameState.START_MOVING)\r\n        }, 0.5)\r\n    }\r\n\r\n\r\n    // 随机返回 0、1、-1\r\n    private _getRandomXPos(): number {\r\n        let randomXPos: number = Math.floor(Math.random() * 3)\r\n        if (randomXPos === 2) return -1\r\n        return randomXPos\r\n    }\r\n\r\n\r\n    private _getSkinID() {\r\n        this._playerSkinID = sys.localStorage.getItem('player')\r\n        this._blockSkinID = sys.localStorage.getItem('block')\r\n    }\r\n\r\n    \r\n    private _setSkin(node: Node) {\r\n        if (node.name === 'player' && this._playerSkinID) {\r\n            const playerMesh: SkinnedMeshRenderer = node.getComponent(SkinnedMeshRenderer)!\r\n            playerMesh.setMaterial(playerMesh.getMaterial(this._playerSkinID), 0)\r\n            playerMesh.setMaterial(playerMesh.getMaterial(this._playerSkinID), 1)\r\n\r\n        } else if (node.name === 'block' && this._blockSkinID) {\r\n            const blockMesh: MeshRenderer = node.getComponent(MeshRenderer)!\r\n            blockMesh.setMaterial(blockMesh.getMaterial(this._blockSkinID), 0)\r\n            blockMesh.setMaterial(blockMesh.getMaterial(this._blockSkinID), 1)\r\n        }\r\n    }\r\n\r\n\r\n    private _loadResource(prefabName: string, parentNode: Node, pos: Vec3) {\r\n        let node: Node = null!\r\n\r\n        resources.load(prefabName, Prefab, (err: any, prefab: Prefab) => {\r\n            if (err) {\r\n                log(\"prefab err:\", err)\r\n                return\r\n            }\r\n\r\n            node = instantiate(prefab) as Node\r\n            node.setParent(parentNode)\r\n            node.setPosition(pos)\r\n            \r\n            \r\n            if (prefabName === 'PlayerNode') {\r\n                if (this._playerSkinID) {\r\n                    let player: Node = node.getChildByPath('player/player')!\r\n                    this._setSkin(player)\r\n                }\r\n\r\n                if (this._blockSkinID) {\r\n                    let block: Node = node.getChildByPath('block/block')!\r\n                    this._setSkin(block)\r\n                }\r\n\r\n                node.active = true\r\n\r\n            } else if (prefabName === 'block' && this._blockSkinID) {\r\n                let block: Node = node.getChildByPath('block')!\r\n                this._setSkin(block)\r\n                node.active = true\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    \r\n\r\n}"]}